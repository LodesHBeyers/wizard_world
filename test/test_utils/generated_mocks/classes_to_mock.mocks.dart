// Mocks generated by Mockito 5.4.4 from annotations
// in wizard_world/test/test_utils/generated_mocks/classes_to_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wizard_world/data/entities/elixir.dart' as _i2;
import 'package:wizard_world/data/entities/house.dart' as _i3;
import 'package:wizard_world/data/entities/ingredient.dart' as _i4;
import 'package:wizard_world/data/entities/spell.dart' as _i5;
import 'package:wizard_world/data/entities/wizard.dart' as _i6;
import 'package:wizard_world/data/repositories/elixirs_repository.dart' as _i7;
import 'package:wizard_world/data/repositories/houses_repository.dart' as _i9;
import 'package:wizard_world/data/repositories/ingredients_repository.dart'
    as _i10;
import 'package:wizard_world/data/repositories/spells_repository.dart' as _i11;
import 'package:wizard_world/data/repositories/wizards_repository.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeElixir_0 extends _i1.SmartFake implements _i2.Elixir {
  _FakeElixir_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHouse_1 extends _i1.SmartFake implements _i3.House {
  _FakeHouse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIngredient_2 extends _i1.SmartFake implements _i4.Ingredient {
  _FakeIngredient_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSpell_3 extends _i1.SmartFake implements _i5.Spell {
  _FakeSpell_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWizard_4 extends _i1.SmartFake implements _i6.Wizard {
  _FakeWizard_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ElixirsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockElixirsRepository extends _i1.Mock implements _i7.ElixirsRepository {
  @override
  List<_i2.Elixir> get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: <_i2.Elixir>[],
        returnValueForMissingStub: <_i2.Elixir>[],
      ) as List<_i2.Elixir>);

  @override
  _i8.Future<List<_i2.Elixir>> getAllElixirs() => (super.noSuchMethod(
        Invocation.method(
          #getAllElixirs,
          [],
        ),
        returnValue: _i8.Future<List<_i2.Elixir>>.value(<_i2.Elixir>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Elixir>>.value(<_i2.Elixir>[]),
      ) as _i8.Future<List<_i2.Elixir>>);

  @override
  _i8.Future<List<_i2.Elixir>> getQueriedElixirs({
    String? name,
    String? difficulty,
    String? ingredient,
    String? inventorFullName,
    String? manufacturer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQueriedElixirs,
          [],
          {
            #name: name,
            #difficulty: difficulty,
            #ingredient: ingredient,
            #inventorFullName: inventorFullName,
            #manufacturer: manufacturer,
          },
        ),
        returnValue: _i8.Future<List<_i2.Elixir>>.value(<_i2.Elixir>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i2.Elixir>>.value(<_i2.Elixir>[]),
      ) as _i8.Future<List<_i2.Elixir>>);

  @override
  _i8.Future<_i2.Elixir> getElixir(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getElixir,
          [id],
        ),
        returnValue: _i8.Future<_i2.Elixir>.value(_FakeElixir_0(
          this,
          Invocation.method(
            #getElixir,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i2.Elixir>.value(_FakeElixir_0(
          this,
          Invocation.method(
            #getElixir,
            [id],
          ),
        )),
      ) as _i8.Future<_i2.Elixir>);

  @override
  void updateCache(List<_i2.Elixir>? items) => super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HousesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHousesRepository extends _i1.Mock implements _i9.HousesRepository {
  @override
  List<_i3.House> get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: <_i3.House>[],
        returnValueForMissingStub: <_i3.House>[],
      ) as List<_i3.House>);

  @override
  _i8.Future<List<_i3.House>> getAllHouses() => (super.noSuchMethod(
        Invocation.method(
          #getAllHouses,
          [],
        ),
        returnValue: _i8.Future<List<_i3.House>>.value(<_i3.House>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i3.House>>.value(<_i3.House>[]),
      ) as _i8.Future<List<_i3.House>>);

  @override
  _i8.Future<_i3.House> getHouse(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getHouse,
          [id],
        ),
        returnValue: _i8.Future<_i3.House>.value(_FakeHouse_1(
          this,
          Invocation.method(
            #getHouse,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i3.House>.value(_FakeHouse_1(
          this,
          Invocation.method(
            #getHouse,
            [id],
          ),
        )),
      ) as _i8.Future<_i3.House>);

  @override
  void updateCache(List<_i3.House>? items) => super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [IngredientsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIngredientsRepository extends _i1.Mock
    implements _i10.IngredientsRepository {
  @override
  List<_i4.Ingredient> get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: <_i4.Ingredient>[],
        returnValueForMissingStub: <_i4.Ingredient>[],
      ) as List<_i4.Ingredient>);

  @override
  _i8.Future<List<_i4.Ingredient>> getAllIngredients() => (super.noSuchMethod(
        Invocation.method(
          #getAllIngredients,
          [],
        ),
        returnValue: _i8.Future<List<_i4.Ingredient>>.value(<_i4.Ingredient>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i4.Ingredient>>.value(<_i4.Ingredient>[]),
      ) as _i8.Future<List<_i4.Ingredient>>);

  @override
  _i8.Future<_i4.Ingredient> getIngredient(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getIngredient,
          [id],
        ),
        returnValue: _i8.Future<_i4.Ingredient>.value(_FakeIngredient_2(
          this,
          Invocation.method(
            #getIngredient,
            [id],
          ),
        )),
        returnValueForMissingStub:
            _i8.Future<_i4.Ingredient>.value(_FakeIngredient_2(
          this,
          Invocation.method(
            #getIngredient,
            [id],
          ),
        )),
      ) as _i8.Future<_i4.Ingredient>);

  @override
  void updateCache(List<_i4.Ingredient>? items) => super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SpellsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSpellsRepository extends _i1.Mock implements _i11.SpellsRepository {
  @override
  List<_i5.Spell> get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: <_i5.Spell>[],
        returnValueForMissingStub: <_i5.Spell>[],
      ) as List<_i5.Spell>);

  @override
  _i8.Future<List<_i5.Spell>> getAllSpells() => (super.noSuchMethod(
        Invocation.method(
          #getAllSpells,
          [],
        ),
        returnValue: _i8.Future<List<_i5.Spell>>.value(<_i5.Spell>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i5.Spell>>.value(<_i5.Spell>[]),
      ) as _i8.Future<List<_i5.Spell>>);

  @override
  _i8.Future<List<_i5.Spell>> getQueriedSpells({
    String? name,
    String? type,
    String? incantation,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQueriedSpells,
          [],
          {
            #name: name,
            #type: type,
            #incantation: incantation,
          },
        ),
        returnValue: _i8.Future<List<_i5.Spell>>.value(<_i5.Spell>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i5.Spell>>.value(<_i5.Spell>[]),
      ) as _i8.Future<List<_i5.Spell>>);

  @override
  _i8.Future<_i5.Spell> getHouse(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getHouse,
          [id],
        ),
        returnValue: _i8.Future<_i5.Spell>.value(_FakeSpell_3(
          this,
          Invocation.method(
            #getHouse,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i5.Spell>.value(_FakeSpell_3(
          this,
          Invocation.method(
            #getHouse,
            [id],
          ),
        )),
      ) as _i8.Future<_i5.Spell>);

  @override
  void updateCache(List<_i5.Spell>? items) => super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [WizardsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWizardsRepository extends _i1.Mock implements _i12.WizardsRepository {
  @override
  List<_i6.Wizard> get cache => (super.noSuchMethod(
        Invocation.getter(#cache),
        returnValue: <_i6.Wizard>[],
        returnValueForMissingStub: <_i6.Wizard>[],
      ) as List<_i6.Wizard>);

  @override
  _i8.Future<List<_i6.Wizard>> getAllWizards() => (super.noSuchMethod(
        Invocation.method(
          #getAllWizards,
          [],
        ),
        returnValue: _i8.Future<List<_i6.Wizard>>.value(<_i6.Wizard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.Wizard>>.value(<_i6.Wizard>[]),
      ) as _i8.Future<List<_i6.Wizard>>);

  @override
  _i8.Future<List<_i6.Wizard>> getQueriedWizards({
    String? firstName,
    String? lastName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getQueriedWizards,
          [],
          {
            #firstName: firstName,
            #lastName: lastName,
          },
        ),
        returnValue: _i8.Future<List<_i6.Wizard>>.value(<_i6.Wizard>[]),
        returnValueForMissingStub:
            _i8.Future<List<_i6.Wizard>>.value(<_i6.Wizard>[]),
      ) as _i8.Future<List<_i6.Wizard>>);

  @override
  _i8.Future<_i6.Wizard> getWizard(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getWizard,
          [id],
        ),
        returnValue: _i8.Future<_i6.Wizard>.value(_FakeWizard_4(
          this,
          Invocation.method(
            #getWizard,
            [id],
          ),
        )),
        returnValueForMissingStub: _i8.Future<_i6.Wizard>.value(_FakeWizard_4(
          this,
          Invocation.method(
            #getWizard,
            [id],
          ),
        )),
      ) as _i8.Future<_i6.Wizard>);

  @override
  void updateCache(List<_i6.Wizard>? items) => super.noSuchMethod(
        Invocation.method(
          #updateCache,
          [items],
        ),
        returnValueForMissingStub: null,
      );
}
